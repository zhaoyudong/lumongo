apply from: '../maven.gradle'

description 'LuMongo Cluster'

dependencies {	    
    compile project(':lumongo-storage')	
    compile project(':lumongo-client') //needed for admin tools
    compile 'com.hazelcast:hazelcast:3.3.1'
    compile 'net.sf.jopt-simple:jopt-simple:4.6'
    compile 'org.apache.lucene:lucene-facet:4.10.1'
    compile 'org.apache.lucene:lucene-queryparser:4.10.1'
    compile 'org.apache.lucene:lucene-analyzers-common:4.10.1'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.10.1'	
    compile 'com.cedarsoftware:json-io:2.6.0'
    compile 'com.googlecode.protobuf-java-format:protobuf-java-format:1.2'
    compile 'joda-time:joda-time:2.4'	
}

jar {
	doFirst {
		String jarClassPath = ""
		for (File file : sourceSets.main.compileClasspath) {
			jarClassPath += " " + file.name
		}
		manifest {
			attributes("Class-Path" : jarClassPath,
					"Main-Class" : "org.lumongo.server.StartNode")
		}
	}
}


task createArchive(dependsOn: jar, type: Tar) {
    compression = Compression.GZIP
    destinationDir = rootProject.file("archives")
    from configurations.runtime
    from configurations.archives.allArtifacts.findAll { !"sources".equals(it.classifier)}.file
    from (project.file("scripts")) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens : [ 'version': version.toString() , 'project' : project.name ])
    }

}
				
task createDeploy(dependsOn: jar, type: Copy) {
    into rootProject.file("deploy")
    from configurations.runtime
	from configurations.archives.allArtifacts.findAll { !"sources".equals(it.classifier)}.file
    from (project.file("scripts")) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens : [ 'version': version.toString() , 'project' : project.name ])
    }
}
						

