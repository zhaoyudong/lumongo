import java.io.File
import java.util.Collection

import org.gradle.api.artifacts.ConfigurationContainer
import org.gradle.api.artifacts.ExternalModuleDependency
import org.gradle.api.file.FileCollection
import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency
import org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryHelper
import org.gradle.api.logging.LogLevel
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.WarPlugin
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.StopActionException
import org.gradle.api.tasks.compile.Compile

apply plugin: 'war'

project.ext { gwtVersion = '2.4.0' }

final String LIB_NAME = "lib"
final String WAR_DIR_NAME = "war"
final String WEB_INF_NAME = "WEB-INF"
final String CLASSES_NAME = "classes"
final String DEPLOY_NAME = "deploy"
final String GWT_CONFIGURATION_NAME = "gwt"
final String ECLIPSE_EXCLUDE_CONFIGURATION_NAME = "eclipseExclude"

final File gwtExtraDir = project.file(project.getBuildDir().name + "/gwt/extras")
final File gwtWarDir = project.file(project.getBuildDir().name + "/gwt/war")

final String PROJECT_DIR_NAME_LC = project.name.toLowerCase();
final String WEB_INF_CLASSES_DIR_NAME = WEB_INF_NAME + File.separator + CLASSES_NAME
final String WEB_INF_DEPLOY_DIR_NAME = WEB_INF_NAME + File.separator + DEPLOY_NAME
final String WEB_INF_LIB_DIR_NAME = WEB_INF_NAME + File.separator + LIB_NAME

final String WAR_WEB_INF_DIR_NAME = WAR_DIR_NAME + File.separator + WEB_INF_NAME
final String WAR_WEB_INF_CLASSES_DIR_NAME = WAR_WEB_INF_DIR_NAME + File.separator + CLASSES_NAME
final String WAR_WEB_INF_LIB_DIR_NAME = WAR_WEB_INF_DIR_NAME + File.separator + LIB_NAME


ConfigurationContainer configurations = project.configurations
configurations.add(GWT_CONFIGURATION_NAME).
		setVisible(false).
		extendsFrom(configurations.getByName(JavaPlugin.COMPILE_CONFIGURATION_NAME)).
		setDescription("GWT libraries to be used to compile this GWT project.")

configurations.add(ECLIPSE_EXCLUDE_CONFIGURATION_NAME).
		setVisible(false).
		setDescription("GWT jars to exclude from eclipse project because they are part of the GWT container already")


project.extensions.eclipse.classpath.containers 'com.google.gwt.eclipse.core.GWT_CONTAINER'
project.extensions.eclipse.classpath.minusConfigurations += project.configurations.getByName(ECLIPSE_EXCLUDE_CONFIGURATION_NAME)
project.extensions.eclipse.project.natures 'com.google.gwt.eclipse.core.gwtNature'
project.extensions.eclipse.project.buildCommand 'com.google.gwt.eclipse.core.gwtProjectValidator'


ExternalModuleDependency dependency

dependency = new DefaultExternalModuleDependency("com.google.gwt", "gwt-dev", gwtVersion )
dependency.setTransitive(false)
project.configurations.getByName(GWT_CONFIGURATION_NAME).dependencies.add(dependency)

dependency = new DefaultExternalModuleDependency("javax.validation", "validation-api", "1.0.0.GA" )
project.configurations.getByName(GWT_CONFIGURATION_NAME).dependencies.add(dependency)
project.configurations.getByName(ECLIPSE_EXCLUDE_CONFIGURATION_NAME).dependencies.add(dependency)

dependency = new DefaultExternalModuleDependency("javax.validation", "validation-api", "1.0.0.GA" )
ModuleFactoryHelper.addExplicitArtifactsIfDefined(dependency, null, "sources")
project.configurations.getByName(GWT_CONFIGURATION_NAME).dependencies.add(dependency)
project.configurations.getByName(ECLIPSE_EXCLUDE_CONFIGURATION_NAME).dependencies.add(dependency)

dependency = new DefaultExternalModuleDependency("com.google.gwt", "gwt-user", gwtVersion )
project.configurations.getByName(WarPlugin.PROVIDED_COMPILE_CONFIGURATION_NAME).dependencies.add(dependency)
project.configurations.getByName(ECLIPSE_EXCLUDE_CONFIGURATION_NAME).dependencies.add(dependency)


dependency = new DefaultExternalModuleDependency("com.google.gwt", "gwt-servlet", gwtVersion )
project.configurations.getByName(JavaPlugin.RUNTIME_CONFIGURATION_NAME).dependencies.add(dependency)
project.configurations.getByName(ECLIPSE_EXCLUDE_CONFIGURATION_NAME).dependencies.add(dependency)

project.tasks.withType(Compile.class).all { Compile task ->
	if (task.getClasspath()) {
		task.setClasspath(task.getClasspath() + project.configurations.getByName(GWT_CONFIGURATION_NAME))
	}
	else {
		task.setClasspath(project.configurations.getByName(GWT_CONFIGURATION_NAME))
	}
}


class CompileGwt extends org.gradle.api.internal.ConventionTask {

	static final String COMPILER_CLASSNAME = 'com.google.gwt.dev.Compiler'
	static final String GWT_CLASSPATH_ID = 'gwt.classpath'

	String style = 'OBF'
	String logLevel = 'INFO'
	boolean debug = false
	boolean disableClassMetadata = false
	boolean disableCastChecking = false
	boolean validateOnly = false
	boolean draftCompile = false
	boolean compileReport = false
	int localWorkers = 1

	java.util.List customJvmArgs = []
	Map customEnvironment = [:]
	Map customSystemProperties = [:]

	Map options = [
		fork: true,
		failonerror : true,
		maxmemory: "384m",
		newEnvironment: false,
		cloneVm: false
	]


	Map otherArgs = [
		classpathref: GWT_CLASSPATH_ID,
		classname: COMPILER_CLASSNAME
	]
	@Input
	Collection<String> modules

	@InputFiles
	FileCollection classpath

	@OutputDirectory
	File warOutputDir

	@OutputDirectory
	File extraOutputDir

	@org.gradle.api.tasks.TaskAction
	def compileGwt() {

		if( modules == null || modules.size == 0 ) {
			logger.warn("No GWT Modules defined for project " + project.name)
			throw new StopActionException("No gwt modules specified")
		}

		project.getAnt().path(id: GWT_CLASSPATH_ID) {
			classpath.each {
				logger.debug("Add {} to GWT classpath!", it)
				pathelement(location: it)
			}
		}

		ant.java(otherArgs + options) {
			customJvmArgs.each { jvmarg(value: it) }
			customEnvironment.each {String key, value -> env(key: key, value: value) }
			customSystemProperties.each {String key, value -> sysproperty(key: key, value: value) }

			if (debug) {
				arg(line: '-ea')
			}

			if (validateOnly) arg(line: '-validateOnly')
			if (draftCompile) arg(line: '-draftCompile')
			if (compileReport) arg(line: '-compileReport')
			if (localWorkers > 1) arg(line: "-localWorkers ${localWorkers}")

			if (disableClassMetadata) arg(line: "-disableClassMetadata")
			if (disableCastChecking) arg(line: "-XdisableCastChecking")

			arg(line: "-logLevel ${logLevel}")
			arg(line: "-style ${style}")

			extraOutputDir.mkdirs()
			arg(line: "-extra \"${extraOutputDir}\"")


			warOutputDir.mkdirs()
			arg(line: "-war \"${warOutputDir}\"")

			modules.each {
				logger.info("Compiling GWT Module {}", it)
				arg(value: it)
			}
		}
	}
}

task compileGwt(type: CompileGwt, dependsOn: org.gradle.api.plugins.JavaPlugin.COMPILE_JAVA_TASK_NAME) {
	logging.level = LogLevel.INFO
	classpath = project.files(sourceSets.main.resources.srcDirs,
			sourceSets.main.java.srcDirs,
			sourceSets.main.output.classesDir,
			project.configurations.getByName(GWT_CONFIGURATION_NAME),
			project.configurations.getByName(JavaPlugin.RUNTIME_CONFIGURATION_NAME))
	warOutputDir = gwtWarDir
	extraOutputDir = gwtExtraDir
	localWorkers = Runtime.getRuntime().availableProcessors()
}

war {
	dependsOn 'compileGwt'
	from project.fileTree(gwtWarDir)

	//don't pull in eclipse compile of gwt
	//don't pull in jars from war/WEB-INF/lib dir (lib/gwt-servlet.jar for example)
	from(WAR_DIR_NAME) {
		exclude PROJECT_DIR_NAME_LC
		exclude WEB_INF_DEPLOY_DIR_NAME
		exclude WEB_INF_CLASSES_DIR_NAME
		exclude WEB_INF_LIB_DIR_NAME
	}

	//make war files lowercase because it is old convention
	baseName = baseName.toLowerCase()
}

eclipse.classpath.defaultOutputDir = file(WAR_WEB_INF_CLASSES_DIR_NAME)


