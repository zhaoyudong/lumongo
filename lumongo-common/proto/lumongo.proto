option java_generic_services = true;
option java_package = "org.lumongo.cluster.message";

// services
service ExternalService {
 	rpc Query (QueryRequest) returns (QueryResponse);
	rpc Store (StoreRequest) returns (StoreResponse);
	rpc Delete (DeleteRequest) returns (DeleteResponse);
	rpc Fetch (FetchRequest) returns (FetchResponse);
	rpc GroupFetch (GroupFetchRequest) returns (GroupFetchResponse);
	rpc CreateIndex (IndexCreateRequest) returns (IndexCreateResponse);
	rpc ChangeIndex (IndexSettingsRequest) returns (IndexSettingsResponse);
	rpc DeleteIndex (IndexDeleteRequest) returns (IndexDeleteResponse);
	rpc GetIndexes (GetIndexesRequest) returns (GetIndexesResponse);
	rpc GetNumberOfDocs (GetNumberOfDocsRequest) returns (GetNumberOfDocsResponse);
	rpc Clear (ClearRequest) returns (ClearResponse);
	rpc Optimize (OptimizeRequest) returns (OptimizeResponse);
	rpc GetFieldNames (GetFieldNamesRequest) returns (GetFieldNamesResponse);
	rpc GetTerms (GetTermsRequest) returns (GetTermsResponse);
	rpc GetMembers (GetMembersRequest) returns (GetMembersResponse);
}

service InternalService {
	rpc Query (QueryRequest) returns (InternalQueryResponse);
	rpc Store (StoreRequest) returns (StoreResponse);
	rpc Delete (DeleteRequest) returns (DeleteResponse);
	rpc GetNumberOfDocs (GetNumberOfDocsRequest) returns (GetNumberOfDocsResponse);
	rpc Clear (ClearRequest) returns (ClearResponse);
	rpc Optimize (OptimizeRequest) returns (OptimizeResponse);
	rpc GetFieldNames (GetFieldNamesRequest) returns (GetFieldNamesResponse);
	rpc GetTerms (GetTermsRequest) returns (GetTermsResponse);
}

message GetMembersRequest {

}

message LMMember {
	required string serverAddress = 1;
	required uint32 externalPort = 2;
	optional uint32 internalPort = 3;
	optional uint32 hazelcastPort = 4;
	optional uint32 restPort = 5;
}

message GetMembersResponse {
	repeated LMMember member = 1;
}


message GetTermsRequest {
	required string indexName = 1;
	required string fieldName = 2;
	required uint32 amount = 3;
	optional string startingTerm = 4;
	optional uint32 minDocFreq = 5 [default = 1];
	optional bool realTime = 6 [default = true];
}

message GetTermsResponse {
	repeated Term term = 1;
	optional Term lastTerm = 2;
}

message Term {
	required string value = 1;
	optional uint64 docFreq = 2;
}

message GetFieldNamesRequest {
	required string indexName = 1;
}

message GetFieldNamesResponse {
	repeated string fieldName = 1;
}

message ClearRequest {
	required string indexName = 1;
}

message ClearResponse {

}

message OptimizeRequest {
	required string indexName = 1;
}

message OptimizeResponse {

}

message GetIndexesRequest {

}

message GetIndexesResponse {
	repeated string indexName = 1;
}

message GetNumberOfDocsRequest {
	required string indexName = 1;
	optional bool realTime = 2 [default = true];
}

message GetNumberOfDocsResponse {
	required uint64 numberOfDocs = 1;
	repeated SegmentCountResponse segmentCountResponse = 2;
}

message SegmentCountResponse {
	required uint32 segmentNumber = 1;
	required uint32 numberOfDocs = 2;
}


message IndexCreateRequest {
	required string indexName = 1;
	required string uniqueIdField = 2;
	required uint32 numberOfSegments = 3;
	required IndexSettings indexSettings = 4;
	optional bool faceted = 5 [default = false];
	optional bool databasePerIndexSegment = 6 [default = false];
	optional bool collectionPerRawDocumentSegment = 7 [default = false];
	optional bool databasePerRawDocumentSegment = 8 [default = false];
}

message IndexCreateResponse {

}

message IndexSettingsRequest {
	required string indexName = 1;
	required IndexSettings indexSettings = 4;
}


enum LMAnalyzer {
		KEYWORD =0;
		LC_KEYWORD = 1;
		WHITESPACE = 2;
		LC_WHITESPACE =3;
		STANDARD = 4;
		NUMERIC_INT = 5;
		NUMERIC_LONG = 6;
		NUMERIC_FLOAT = 7;
		NUMERIC_DOUBLE = 8;

}

message IndexSettings {
	required string defaultSearchField = 1;
	repeated FieldConfig fieldConfig = 2;
	optional LMAnalyzer defaultAnalyzer = 3 [default = LC_KEYWORD];
	optional bool applyUncommitedDeletes = 4 [default = true];
	optional double requestFactor = 5 [default = 2.0];
	optional uint32 minSegmentRequest = 6 [default = 2];
	optional uint32 idleTimeWithoutCommit = 7 [default = 30];
	optional uint32 segmentCommitInterval = 8 [default = 3200];
	optional bool blockCompression = 9 [default = false];
	optional double segmentTolerance = 10 [default = 0.05];
	optional uint32 segmentFlushInterval = 11 [default = 1600];
}

message FieldConfig {
	required string fieldName = 1;
	optional LMAnalyzer analyzer = 2;
}

message IndexSettingsResponse {

}

message IndexDeleteRequest {
	required string indexName = 1;
}

message IndexDeleteResponse {

}

message StoreRequest {
    required string uniqueId = 1;
    required string indexName = 2;
	optional LMDoc indexedDocument = 3;
	optional ResultDocument resultDocument = 4;
	repeated AssociatedDocument associatedDocument = 5;
	optional bool clearExistingAssociated = 6 [default = false];
}

message StoreResponse {
}

message LMDoc {
	repeated LMField indexedField = 1;
	repeated string facet = 2;
	optional int64 timestamp = 3;
}


message LMField {
	required string fieldName = 1;
	repeated string fieldValue = 2;
	repeated int32 intValue = 3;
	repeated int64 longValue = 4;
	repeated float floatValue = 5;
	repeated double doubleValue = 6;
}


message ResultDocument {
	required string uniqueId = 1;
	required string indexName = 2;
	optional bytes document = 3;
	enum Type {
		BSON = 0;
		BINARY = 1;
		TEXT = 2;
	}
	optional Type type = 4 [default = BINARY];
	optional bool compressed = 5 [default = false];
	repeated Metadata metadata = 6;
	optional int64 timestamp = 7;
}

message AssociatedDocument {
	required string filename = 1;
	required string documentUniqueId = 2;
	required string indexName = 3;
	optional bytes document = 4;
	optional bool compressed = 5 [default = false];
	repeated Metadata metadata = 6;
	optional int64 timestamp = 7;
}

message Metadata {
	required string key = 1;
	required string value = 2;
}

message ScoredResult {
	required string uniqueId = 1;
	required float score = 2;
	required uint32 docId = 3;
	required string indexName = 4;
	required uint32 segment = 5;
	required uint32 resultIndex = 6;
	repeated string sortTerm = 7;
	repeated int32 sortInteger = 8;
	repeated int64 sortLong = 9;
	repeated float sortFloat = 10;
	repeated double sortDouble = 11;
	required int64 timestamp = 12;
}

message SortRequest {
	repeated FieldSort fieldSort = 1;
}

message FieldSort {
	enum Direction {
		ASCENDING = 1;
		DESCENDING = 2;
	};

	required string sortField = 1;
	optional Direction direction = 2 [default = ASCENDING];
}

message FacetCount {
	required string facet = 1;
	required uint64 count = 2;
}

message FacetRequest {
	repeated CountRequest countRequest = 1;
	repeated string drillDown = 2;
}

message CountRequest {
	required string facet = 1;
	optional uint32 maxFacets = 2 [default = 10];
}


message SegmentResponse {
    required uint32 segmentNumber = 1;
    required string indexName = 2;
    required uint32 totalHits = 3;
    repeated ScoredResult scoredResult = 4;
    optional ScoredResult next = 5;
    repeated FacetCount facetCount = 6;
}


message LastIndexResult {
	required string indexName = 1;
	repeated ScoredResult lastForSegment = 2;
}

message LastResult {
	repeated LastIndexResult lastIndexResult = 1;
}

message InternalQueryResponse {
	repeated IndexSegmentResponse indexSegmentResponse = 1;
}

message IndexSegmentResponse {
	required string indexName = 1;
	repeated SegmentResponse segmentReponse = 2;
}

message QueryRequest {
	repeated string index = 1;
	required string query = 2;
	required uint32 amount = 3;
	optional LastResult lastResult = 4;
	optional bool fetchFull = 5 [default = false];
	optional bool realTime = 6 [default = true];
	optional FacetRequest facetRequest = 7;
	optional SortRequest sortRequest = 8;
}


message QueryResponse {
	required uint64 totalHits = 1;
	repeated ScoredResult results = 2;
	required LastResult lastResult = 3;
	repeated FacetCount facetCount = 4;
}

message DeleteRequest {
	required string indexName = 1;
    required string uniqueId = 2;
    optional string filename = 3;
    optional bool deleteDocument = 4 [default = true];
    optional bool deleteAllAssociated = 5 [default = true];
}

message DeleteResponse {

}

message GroupFetchRequest {
	repeated FetchRequest fetchRequest = 1;
}

message GroupFetchResponse {
	repeated FetchResponse fetchResponse = 1;
}

message FetchRequest {
    required string uniqueId = 1;
    required string indexName = 2;
    optional string fileName = 3;
    enum FetchType {
		FULL = 1;
		META = 2;
		NONE = 3;
	}
    optional FetchType resultFetchType = 4 [default = FULL];
    optional FetchType associatedFetchType = 5 [default = META];
}

message FetchResponse {
	optional ResultDocument resultDocument = 1;
	repeated AssociatedDocument associatedDocument = 2;
}





